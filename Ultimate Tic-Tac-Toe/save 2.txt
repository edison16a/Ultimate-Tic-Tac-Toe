import SwiftUI

struct OnlineView: View {
    @State private var rank: String = UserDefaults.standard.string(forKey: "rank") ?? "Bronze"
    @State private var bars: Int = UserDefaults.standard.integer(forKey: "bars")
    @State private var elo: Int = UserDefaults.standard.integer(forKey: "elo")
    @State private var leaderboard: [LeaderboardEntry] = LeaderboardEntry.mockLeaderboard()
    @State private var opponentName: String = ""
    @State private var inMatch: Bool = false
    @State private var showLeaderboard: Bool = false
    @State private var timer = Timer.publish(every: Double.random(in: 10...25), on: .main, in: .common).autoconnect()
    @State private var matchEndedEarly: Bool = false
    @State private var matchmaking: Bool = false
    
    // Ultimate Tic-Tac-Toe States
    @State private var bigBoard: [[SubBoard]] = Array(
        repeating: Array(repeating: SubBoard(), count: 3),
        count: 3
    )
    @State private var currentPlayer: String = "X"
    @State private var activeSubBoard: (Int, Int)? = nil
    @State private var gameOver: Bool = false
    @State private var winner: String? = nil
    
    var body: some View {
        VStack {
            Text("Rank: \(rank)")
                .font(.title)
                .padding()
            
            Text("Gain 1 bar each win. Reach 3 to increase your rank. After Reaching Max Rank (Champion) You Will Have An Elo and Can Get on the Leaderboard.\n Reach 1000 Elo To Become an Official GrandMaster (GM)")
                .font(.subheadline)
                .multilineTextAlignment(.center)
                .padding()
            
            Image(rank.lowercased())
                .resizable()
                .scaledToFit()
                .frame(height: 100)
                .padding()
            
            if rank == "Champion" {
                Text("Elo: \(elo)")
                    .font(.largeTitle)
                    .padding()
            } else {
                ProgressBar(bars: $bars)
                    .padding()
                    .cornerRadius(5)
            }
            
            if matchmaking {
                VStack {
                    Text("Matchmaking...")
                        .font(.headline)
                        .padding()
                    
                    ProgressView() // Spinning loader to simulate matchmaking
                        .scaleEffect(1.5)
                        .padding()
                }
            } else if inMatch {
                VStack {
                    Text("Playing against \(opponentName)...")
                        .font(.headline)
                        .padding()
                    
                    // Ultimate Tic-Tac-Toe Board View
                    GameBoardView(
                        bigBoard: $bigBoard,
                        currentPlayer: $currentPlayer,
                        activeSubBoard: $activeSubBoard,
                        gameOver: $gameOver,
                        winner: $winner,
                        onMove: handleMove // Pass the handleMove function here
                    )


                    
                    if gameOver {
                        Text(winner == nil ? "It's a Draw!" : "\(winner!) Wins!")
                            .font(.title)
                            .padding()
                        Button("Reset Game") {
                            resetGameBoard()
                        }
                        .padding()
                    } else {
                        Button(action: {
                            matchEndedEarly = true // Mark the match as ended early
                            finishMatch()          // Call finishMatch to process the early end
                        }) {
                            Text("Forfeit")
                                .font(.headline)
                                .padding()
                                .background(Color.red)
                                .foregroundColor(.white)
                                .cornerRadius(10)
                        }
                        .padding()
                    }
                }
            } else {
                Button(action: findOpponent) {
                    Text("Play Ranked Match")
                        .font(.headline)
                        .padding()
                        .background(Color.blue)
                        .foregroundColor(.white)
                        .cornerRadius(10)
                }
                .padding()
            }
            
            Button("GrandMaster Leaderboard") {
                showLeaderboard = true
            }
            .font(.headline)
            .padding()
            .sheet(isPresented: $showLeaderboard) {
                LeaderboardView(leaderboard: leaderboard)
            }
        }
        .onAppear(perform: loadProgress)
        .onReceive(timer) { _ in
            updateLeaderboard()
        }
        .navigationTitle("Online Mode")
    }
    
    func updateLeaderboard() {
        leaderboard = leaderboard.map { entry in
            var updatedEntry = entry
            updatedEntry.elo += Int.random(in: -3...5)
            return updatedEntry
        }
        leaderboard.sort { $0.elo > $1.elo }
    }
    
    func findOpponent() {
        matchmaking = true // Start matchmaking
        let delay = Double.random(in: 2...10) // Random delay between 2-10 seconds
        
        DispatchQueue.main.asyncAfter(deadline: .now() + delay) {
            matchmaking = false // End matchmaking
            opponentName = "Anonymous\(Int.random(in: 1000...9999))"
            resetGameBoard()
            inMatch = true
        }
    }
    
    func handleMove(bigRow: Int, bigCol: Int, subRow: Int, subCol: Int) {
        guard !gameOver, bigBoard[bigRow][bigCol].cells[subRow][subCol].isEmpty else { return }
        
        bigBoard[bigRow][bigCol].cells[subRow][subCol] = currentPlayer
        if UltimateGameLogic.checkWinner(on: bigBoard[bigRow][bigCol]) != nil {
            bigBoard[bigRow][bigCol].winner = currentPlayer
        }
        
        // Check for overall game state
        activeSubBoard = (subRow, subCol)
        checkGameOver()
        
        // Switch player
        currentPlayer = (currentPlayer == "X") ? "O" : "X"
    }


    
    func finishMatch() {
        inMatch = false
        
        // If there is a winner, update bars accordingly
        if let winner = UltimateGameLogic.checkWinner(on: bigBoard) {
            if winner == "X" { // Player wins
                bars += 1
                if bars > 3 { rankUp() }
            } else if winner == "O" { // Opponent wins
                bars -= 1
                if bars < 0 { rankDown() }
            }
        } else if UltimateGameLogic.isDraw(on: bigBoard) {
            // Handle draws if necessary
        }
        
        saveProgress()
    }
    
    func resetGameBoard() {
        bigBoard = Array(repeating: Array(repeating: SubBoard(), count: 3), count: 3)
        currentPlayer = "X"
        activeSubBoard = nil
        gameOver = false
        winner = nil
    }
    
    func checkGameOver() {
        if let overallWinner = UltimateGameLogic.checkWinner(on: bigBoard) {
            winner = overallWinner
            gameOver = true
        } else if UltimateGameLogic.isDraw(on: bigBoard) {
            winner = nil
            gameOver = true
        }
    }

    
    func rankUp() {
        if rank == "Champion" {
            elo += Int.random(in: 22...39)
        } else {
            bars = 1
            rank = nextRank(from: rank)
        }
    }
    
    func rankDown() {
        if rank == "Champion" {
            elo = max(elo - Int.random(in: 53...78), 0)
        } else if rank != "Bronze" {
            bars = 3
            rank = previousRank(from: rank)
        } else {
            bars = 0
        }
    }
    
    func saveProgress() {
        UserDefaults.standard.set(rank, forKey: "rank")
        UserDefaults.standard.set(bars, forKey: "bars")
        UserDefaults.standard.set(elo, forKey: "elo")
    }
    
    func loadProgress() {
        rank = UserDefaults.standard.string(forKey: "rank") ?? "Bronze"
        bars = UserDefaults.standard.integer(forKey: "bars")
        elo = UserDefaults.standard.integer(forKey: "elo")
    }
    
    func nextRank(from rank: String) -> String {
        switch rank {
        case "Bronze": return "Silver"
        case "Silver": return "Gold"
        case "Gold": return "Platinum"
        case "Platinum": return "Diamond"
        case "Diamond": return "Champion"
        default: return "Champion"
        }
    }
    
    func previousRank(from rank: String) -> String {
        switch rank {
        case "Silver": return "Bronze"
        case "Gold": return "Silver"
        case "Platinum": return "Gold"
        case "Diamond": return "Platinum"
        case "Champion": return "Diamond"
        default: return "Bronze"
        }
    }
    
    struct GameBoardView: View {
        @Binding var bigBoard: [[SubBoard]]
        @Binding var currentPlayer: String
        @Binding var activeSubBoard: (Int, Int)?
        @Binding var gameOver: Bool
        @Binding var winner: String?

        let onMove: (Int, Int, Int, Int) -> Void // Callback for handling moves

        var body: some View {
            VStack(spacing: 10) {
                ForEach(0..<3, id: \.self) { bigRow in
                    HStack(spacing: 10) {
                        ForEach(0..<3, id: \.self) { bigCol in
                            SubBoardView(
                                subBoard: $bigBoard[bigRow][bigCol],
                                isActive: isActiveSubBoard(bigRow: bigRow, bigCol: bigCol),
                                onMove: { subRow, subCol in
                                    onMove(bigRow, bigCol, subRow, subCol)
                                }
                            )
                        }
                    }
                }
            }
        }

        /// Determines if the given sub-board should be active
        private func isActiveSubBoard(bigRow: Int, bigCol: Int) -> Bool {
            activeSubBoard == nil || activeSubBoard! == (bigRow, bigCol)
        }
    }



    
    struct SubBoardView: View {
        @Binding var subBoard: SubBoard
        var isActive: Bool
        var onMove: (Int, Int) -> Void
        
        var body: some View {
            VStack(spacing: 2) {
                ForEach(0..<3, id: \.self) { row in
                    HStack(spacing: 2) {
                        ForEach(0..<3, id: \.self) { col in
                            Button(action: {
                                if isActive {
                                    onMove(row, col)
                                }
                            }) {
                                Text(subBoard.cells[row][col])
                                    .font(.title)
                                    .frame(width: 40, height: 40)
                                    .background(isActive ? Color.blue.opacity(0.3) : Color.gray.opacity(0.3))
                                    .foregroundColor(.black)
                                    .border(Color.black, width: 1)
                            }
                        }
                    }
                }
            }
            .padding(4)
            .background(subBoard.winner == nil ? Color.clear : (subBoard.winner == "X" ? Color.red.opacity(0.3) : Color.green.opacity(0.3)))
        }
    }
    
    // Game Logic and Models
    struct SubBoard {
        var cells: [[String]] = Array(repeating: Array(repeating: "", count: 3), count: 3)
        var winner: String? = nil
    }
    
    struct UltimateGameLogic {
        static func checkWinner(on subBoard: SubBoard) -> String? {
            // Implement ultimate tic-tac-toe logic here for individual boards
            // Adapt this from ContentView.swift logic
            return nil
        }
        
        static func checkWinner(on bigBoard: [[SubBoard]]) -> String? {
            // Implement logic to check for winner across all boards
            return nil
        }
        
        static func isDraw(on bigBoard: [[SubBoard]]) -> Bool {
            // Implement logic to check for a draw condition
            return false
        }
    }
    
    struct LeaderboardEntry: Identifiable {
        let id = UUID()
        let name: String
        var elo: Int
        
        static func mockLeaderboard() -> [LeaderboardEntry] {
            let usernames = [
                "CSA (GM)", "Revquant (GM)", "Swaggyboi19 (GM)", "Buwuga (GM)", "IAMzMarsh (GM)",
                "ItssssssJake (GM)", "CallMeBaby (GM)", "SigmaBoiSigmaBoi (GM)", "YeahImASwifty (GM)", "WhatTheDogDoin (GM)", "edichessboi23 (GM)"
            ]
            
            return usernames.enumerated().map { index, username in
                // Assign decreasing ELOs based on position
                LeaderboardEntry(name: username, elo: Int(floor(1500 - (Double(index+1) * 43.28374))))
            }
        }
    }
    struct ProgressBar: View {
        @Binding var bars: Int
        
        var body: some View {
            HStack {
                ForEach(0..<3) { index in
                    Rectangle()
                        .frame(width: 70, height: 30)
                        .cornerRadius(10)
                        .foregroundColor(index < bars ? .blue : .gray)
                }
            }
        }
    }
    struct LeaderboardView: View {
        let leaderboard: [LeaderboardEntry]
        let currentPlayer: String = UserDefaults.standard.string(forKey: "username") ?? "You (GM)"
        
        var body: some View {
            NavigationView {
                List(leaderboard) { entry in
                    HStack {
                        Text(entry.name)
                            .font(entry.name == currentPlayer ? .headline : .body)
                            .foregroundColor(entry.name == currentPlayer ? .blue : .primary)
                        Spacer()
                        Text("\(entry.elo)")
                    }
                }
                .navigationTitle("Top GrandMasters")
            }
        }
    }
}
